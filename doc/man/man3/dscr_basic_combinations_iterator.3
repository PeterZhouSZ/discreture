.TH "dscr::basic_combinations< IntType >::iterator" 3 "Sun Feb 28 2016" "Version 1" "discreture" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dscr::basic_combinations< IntType >::iterator \- 
.PP
Random access iterator class\&. It's much more efficient as a bidirectional iterator than purely random access\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Combinations\&.hpp>\fP
.PP
Inherits iterator< std::random_access_iterator_tag, vector< IntType > >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBiterator\fP (IntType n, IntType r)"
.br
.ti -1c
.RI "\fBiterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBiterator\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "const vector< IntType > & \fBoperator*\fP () const "
.br
.ti -1c
.RI "const combination * \fBoperator->\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP & \fBoperator+=\fP (difference_type n)"
.br
.RI "\fIRandom access capabilities to the iterators\&. \fP"
.ti -1c
.RI "\fBiterator\fP & \fBoperator-=\fP (difference_type n)"
.br
.ti -1c
.RI "size_type \fBID\fP () const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBiterator\fP &it) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBiterator\fP &it) const "
.br
.ti -1c
.RI "bool \fBis_at_end\fP (IntType n) const "
.br
.ti -1c
.RI "void \fBreset\fP (IntType n, IntType r)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBbasic_combinations\fP"
.br
.ti -1c
.RI "\fBiterator\fP \fBoperator+\fP (\fBiterator\fP lhs, difference_type n)"
.br
.ti -1c
.RI "\fBiterator\fP \fBoperator-\fP (\fBiterator\fP lhs, difference_type n)"
.br
.ti -1c
.RI "difference_type \fBoperator-\fP (const \fBiterator\fP &lhs, const \fBiterator\fP &rhs)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class IntType>class dscr::basic_combinations< IntType >::iterator"
Random access iterator class\&. It's much more efficient as a bidirectional iterator than purely random access\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class IntType > \fBiterator\fP& \fBdscr::basic_combinations\fP< IntType >::iterator::operator+= (difference_typen)\fC [inline]\fP"

.PP
Random access capabilities to the iterators\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP -> This assumes 0 <= n+ID <= size(n,k) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for discreture from the source code\&.
