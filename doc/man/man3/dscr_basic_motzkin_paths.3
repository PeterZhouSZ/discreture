.TH "dscr::basic_motzkin_paths< IntType >" 3 "Fri Feb 26 2016" "Version 1" "discreture" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dscr::basic_motzkin_paths< IntType > \- 
.PP
Class for iterating through all motzkin paths\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Motzkin\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBiterator\fP"
.br
.RI "\fIForward iterator class\&. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef long long int \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef unsigned long long int \fBsize_type\fP"
.br
.ti -1c
.RI "typedef vector< IntType > \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef vector< IntType > \fBmotzkin_path\fP"
.br
.ti -1c
.RI "typedef \fBbasic_combinations\fP
.br
< IntType >::\fBiterator\fP \fBcomb_i\fP"
.br
.ti -1c
.RI "typedef \fBbasic_dyck_paths\fP
.br
< IntType >::\fBiterator\fP \fBdyck_i\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_motzkin_paths\fP (IntType n)"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.RI "\fIThe total number of motzkin_paths\&. \fP"
.ti -1c
.RI "IntType \fBget_n\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBbegin\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBend\fP () const "
.br
.ti -1c
.RI "\fBbasic_motzkin_paths\fP (int n)"
.br
.ti -1c
.RI "lluint \fBsize\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBbegin\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBend\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::string \fBto_string\fP (const motzkin_path &data, const string &delim='(-)')"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class IntType>class dscr::basic_motzkin_paths< IntType >"
Class for iterating through all motzkin paths\&. 


.PP
\fBParameters:\fP
.RS 4
\fIIntType\fP must be a SIGNED integer type\&.
.RE
.PP
Motzkin paths are paths that go from $(0,0)$ to $(0,2n)$, which never go below the $ y=0$ line, in which each step is from $(x,y)$ to either $(x+1,y+1)$ or $(x+1,y-1)$ or $(x+1,y)$ #Example Usage: 
.PP
.nf
motzkin_paths X(4)
for (const auto& x : X)
    cout << x << endl;

.fi
.PP
 Prints out: [ 0 0 0 0 ] [ 1 -1 0 0 ] [ 1 0 -1 0 ] [ 0 1 -1 0 ] [ 1 0 0 -1 ] [ 0 1 0 -1 ] [ 0 0 1 -1 ] [ 1 1 -1 -1 ] [ 1 -1 1 -1 ]
.PP
.SH "Example: Parenthesis"
.PP
.PP
.PP
.nf
motzkin_paths X(4)
for (const auto& x : X)
    cout << motzkin_paths::to_string(x, "(-)") << endl;
.fi
.PP
.PP
.SS "Prints out: "
.PP
()-- (-)- -()- (--) -(-) --() (()) ()() 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class IntType > \fBdscr::basic_motzkin_paths\fP< IntType >::\fBbasic_motzkin_paths\fP (IntTypen)\fC [inline]\fP"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP is an integer >= 0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<class IntType > size_type \fBdscr::basic_motzkin_paths\fP< IntType >::size () const\fC [inline]\fP"

.PP
The total number of motzkin_paths\&. 
.PP
\fBReturns:\fP
.RS 4
M_n 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for discreture from the source code\&.
