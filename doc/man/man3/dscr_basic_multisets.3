.TH "dscr::basic_multisets< IntType >" 3 "Wed Mar 16 2016" "Version 1" "discreture" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dscr::basic_multisets< IntType > \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBiterator\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef long long int \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef unsigned long long int \fBsize_type\fP"
.br
.ti -1c
.RI "typedef vector< IntType > \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef vector< IntType > \fBmultiset\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_multisets\fP (const vector< IntType > &set)"
.br
.RI "\fIclass of all submultiset of a given set, expressed as incidence vectors with multiplicities \fP"
.ti -1c
.RI "\fBbasic_multisets\fP (IntType size, IntType n=1)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBbegin\fP () const "
.br
.ti -1c
.RI "const \fBiterator\fP & \fBend\fP () const "
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class IntType > \fBdscr::basic_multisets\fP< IntType >::\fBbasic_multisets\fP (const vector< IntType > &set)\fC [inline]\fP"

.PP
class of all submultiset of a given set, expressed as incidence vectors with multiplicities 
.PP
\fBParameters:\fP
.RS 4
\fIIntType\fP can be an int, uint, etc\&. It can be signed or unsigned (the negatives are not used) 
.SH "Example:"
.PP
.RE
.PP
.PP
.nf
multisets X({1,0,3,1});
for (const auto& x : X)
    cout << x << " ";
.fi
.PP
.PP
Prints out: 
.PP
.nf
[ 0 0 0 0 ]
[ 1 0 0 0 ]
[ 0 0 1 0 ]
[ 1 0 1 0 ]
[ 0 0 2 0 ]
[ 1 0 2 0 ]
[ 0 0 3 0 ]
[ 1 0 3 0 ]
[ 0 0 0 1 ]
[ 1 0 0 1 ]
[ 0 0 1 1 ]
[ 1 0 1 1 ]
[ 0 0 2 1 ]
[ 1 0 2 1 ]
[ 0 0 3 1 ]
[ 1 0 3 1 ]

.fi
.PP
.PP
TODO: Make it a random-access class and more like the others\&. It's not hard\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for discreture from the source code\&.
